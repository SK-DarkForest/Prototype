Shader "Custom/MetaballShader"
{
    Properties
    {
        _Metaballs ("Metaballs", Vector) = (0,0,0,0) [10]
        _ArraySize ("ArraySize", Int) = 10
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        Pass
        {
            CGPROGRAM
// Upgrade NOTE: excluded shader from DX11 because it uses wrong array syntax (type[size] name)
#pragma exclude_renderers d3d11
            #pragma vertex vert
            #pragma fragment frag

            struct appdata_t
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            uniform float4 _Metaballs[10];

            v2f vert(appdata_t v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {
                float2 uv = i.uv * 2.0 - 1.0;
                float d = 0.0;
                // Loop over the metaballs
                for (int j = 0; j < _ArraySize/3; j++)
                {
                    float4 mb = _Metaballs[j];
                    float2 toBall = mb.xy - uv;
                    d += mb.z / dot(toBall, toBall);
                }
                // Threshold
                if (d > 1.0)
                    return fixed4(1.0, 0.0, 0.0, 1.0); // Red color for metaballs
                else
                    return fixed4(0.0, 0.0, 0.0, 1.0); // Black color for background
            }
            ENDCG
        }
    }
}
